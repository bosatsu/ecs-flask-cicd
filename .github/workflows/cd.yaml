name: Deploy to AWS ECS

on:
  workflow_dispatch:
  pull_request:
    branches:
      - test
      - main
    types:
      - closed
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - .gitignore

jobs:
  deploy:
    name: Deploy
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPOSITORY_TEST: ${{ vars.ECR_REPOSITORY_TEST }}
      ECR_REPOSITORY_PROD: ${{ vars.ECR_REPOSITORY_PROD }}
      IMAGE_TAG: ${{ github.sha }}

    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: When test environment, set test variables
      if: github.base_ref == 'test'
      run: |
        echo "ecr_repository=${{ vars.ECR_REPOSITORY_TEST }}" >> "$GITHUB_ENV"
        echo "ecs_service=spage-env-test-ecs-service" >> "$GITHUB_ENV"
        echo "ecs_cluster=spage-env-test-ecs-cluster" >> "$GITHUB_ENV"

    - name: When prod environment, set prod variables
      if: github.base_ref == 'main'
      run: |
        echo "ecr_repository=${{ vars.ECR_REPOSITORY_PROD }}" >> "$GITHUB_ENV"
        echo "ecs_service=spage-env-prod-ecs-service" >> "$GITHUB_ENV"
        echo "ecs_cluster=spage-env-prod-ecs-cluster" >> "$GITHUB_ENV"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/"${{ env.ecr_repository }}":$IMAGE_TAG .
        docker push $ECR_REGISTRY/"${{ env.ecr_repository }}":$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ env.ecr_repository }}:$IMAGE_TAG" >> "$GITHUB_ENV"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: spage-task
        image: ${{ env.image }}

    - name: Deploy to AWS ECS
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: "${{ env.ecs_service }}"
        cluster: "${{ env.ecs_cluster }}"
        wait-for-service-stability: true

    - name: Notify on success
      if: steps.deploy.outcome == 'success'
      run: echo "Image ${{ env.image }}" was successfully deployed to "${{ env.ecs_cluster }}"
